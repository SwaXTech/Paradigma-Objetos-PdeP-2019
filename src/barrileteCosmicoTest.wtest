import barrileteCosmico.*

describe "Barrilete Cósmico" {

	var garlicSea
	var silverSea
	var lastToninas
	var goodAirs
	var pHari
	
	fixture{
		garlicSea   = new Destino(nombre = "Garlic's Sea", equipajeImprescindible = ["Caña de pescar", "Piloto"],                precio= 2500)
		silverSea   = new Destino(nombre = "Silver's Sea", equipajeImprescindible = ["Protector Solar", "Equipo de Buceo"],      precio= 1350)
		lastToninas = new Destino(nombre = "Last Toninas", equipajeImprescindible = ["Vacuna Gripal","Vacuna B","Necronomicon"], precio= 3500)
		goodAirs    = new Destino(nombre = "Good Airs",    equipajeImprescindible = ["Cerveza", "Protector Solar"],              precio= 1500)
		
		barrileteCosmico.agregarDestino(garlicSea)
		barrileteCosmico.agregarDestino(silverSea)	
		barrileteCosmico.agregarDestino(lastToninas)	
		barrileteCosmico.agregarDestino(goodAirs)
		
		pHari = new Usuario(nombre = "Pablo Hari", nombreDeUsuario ="PHari", lugaresVisitados = #{lastToninas, goodAirs}, saldo=1500)
		
	}
	
	test "Los destinos más importantes de Barrilete Cósmico son: Garlic's Sea y Last Toninas"{
		assert.equals(barrileteCosmico.destinosMasImportantes(), #{garlicSea, lastToninas})
	}
	
	test "Aplicar un descuento de 25% a Last Toninas, su precio es de $2625" {
		lastToninas.aplicarDescuento(25)
		assert.equals(2625, lastToninas.precio())
	}
	
	test "Aplicar un descuento de 25% a Last Toninas, tiene el certificado de descuento en su equipaje imprescindible" {
		lastToninas.aplicarDescuento(25)
		assert.that(lastToninas.equipajeImprescindible().contains("Certificado de descuento"))
	}
	
	test "Aplicar un descuento del 15% a todos los destinos de Barrilete Cósmico, 
			Garlic´s sea: $2125
			Silver's Sea: $1147.5
			Last Toninas: $2975
			Good Airs: $1275
			Todos deben poseer el certificado de descuento."
		{
			barrileteCosmico.aplicarDescuento(15)
			assert.equals(2125, garlicSea.precio())
			assert.equals(1147.5, silverSea.precio())
			assert.equals(2975, lastToninas.precio())
			assert.equals(1275, goodAirs.precio())
			assert.that(barrileteCosmico.todosLosDestinosPoseenCertificadoDeDescuento())
		}
	
	test "Silver's Sea no es un destino peligroso" {
		assert.notThat(silverSea.esPeligroso())
	}
	
	test "Last Toninas es el único destino peligroso" {
		assert.equals(#{lastToninas}, barrileteCosmico.destinosPeligrosos())
	}
	
	test "Barrilete cósmico es una empresa extrema" {
		assert.that(barrileteCosmico.esEmpresaExtrema())
	}
	test "Carta de destinos de Barrilete Cosmico"{
		assert.equals(
			#{"Last Toninas", "Garlic's Sea", "Good Airs", "Silver's Sea"}, 
			barrileteCosmico.cartaDeDestinos()
		)
	
	}
	test "Los kilometros de PHari son 500" {
		assert.equals(500, pHari.obtenerKM())
	}
	test "PHari vuela a Silver's Sea" {
		assert.that(pHari.puedeViajar(silverSea))
		pHari.volarA(silverSea)
		assert.that(pHari.realizoViajeA(silverSea))
	}
	test "PHari vuela a Silver's Sea y se le descuenta dinero"{
		pHari.volarA(silverSea)
		assert.equals(150, pHari.saldo())
	}
	test "PHari intenta volar a Last Toninas, pero no le alcanza el dinero" {
		assert.throwsExceptionLike(
			new VuelosUsuarioException(message = "No se cuenta con saldo suficiente para realizar el vuelo"), 
			{ 
				pHari.volarA(lastToninas)
			}
		)
	}
}
