import barrileteCosmico.*
import usuario.*
import medioDeTransporte.*
import viaje.*
import localidad.*
import perfiles.*

describe "Barrilete Cósmico" {

	var garlicSea
	var silverSea
	var lastToninas
	var goodAirs
	var pHari
	var elDiegote
	var losArgento
	var cumbanchaVolante
	var el114
	var goodAirsASilverSea
	var lastToninasAGarlicSea
	var turbinaPotente
	var turbinaIncendiada
	var turbinaUltraPotente
	
	fixture{
		garlicSea   = new Localidad(nombre = "Garlic's Sea", equipajeImprescindible = ["Caña de pescar", "Piloto"],                precio= 2500, kmUbicacion = 365)
		silverSea   = new Localidad(nombre = "Silver's Sea", equipajeImprescindible = ["Protector Solar", "Equipo de Buceo"],      precio= 1350, kmUbicacion = 415)
		lastToninas = new Localidad(nombre = "Last Toninas", equipajeImprescindible = ["Vacuna Gripal","Vacuna B","Necronomicon"], precio= 3500, kmUbicacion = 340)
		goodAirs    = new Localidad(nombre = "Good Airs",    equipajeImprescindible = ["Cerveza", "Protector Solar"],              precio= 1500, kmUbicacion = 0)
		
		barrileteCosmico.agregarLocalidad(garlicSea)
		barrileteCosmico.agregarLocalidad(silverSea)	
		barrileteCosmico.agregarLocalidad(lastToninas)	
		barrileteCosmico.agregarLocalidad(goodAirs)
		
		turbinaPotente = new Turbina(impulso = 40)
		turbinaIncendiada = new Turbina(impulso = 10)
		turbinaUltraPotente = new Turbina(impulso = 500000)
		
		cumbanchaVolante = new Avion(turbinas = [turbinaPotente, turbinaIncendiada], minutosKm = 0.0017)   // Dije suba
		el114 = new Micro(minutosKm = 5)
		barrileteCosmico.agregarMedioDeTransporte(cumbanchaVolante)
		barrileteCosmico.agregarMedioDeTransporte(el114)
		
		goodAirsASilverSea = new Viaje(localidadInicial = goodAirs, localidadFinal = silverSea, medioDeTransporte= cumbanchaVolante)
		lastToninasAGarlicSea = new Viaje(localidadInicial = lastToninas, localidadFinal = garlicSea, medioDeTransporte= el114)
		
		
		pHari = new Usuario(nombre = "Pablo Hari", nombreDeUsuario ="PHari", saldo = 50000000, localidadDeOrigen = lastToninas, items = ["Protector Solar", "Equipo de Buceo", "Cerveza", "Protector Solar","Vacuna Gripal","Vacuna B","Necronomicon"], perfil = estudiantil)
		elDiegote = new Usuario(nombre = "Diego Maradona",  nombreDeUsuario = "ElDiegote", saldo = 3000000, localidadDeOrigen = goodAirs,items = ["Caña de pescar", "Piloto"], perfil = empresarial)
		losArgento = new Usuario(nombre = "Los Argento",  nombreDeUsuario = "LosArgento", saldo = 50000, localidadDeOrigen = goodAirs, perfil = grupoFamiliar)
		
	}
	
	test "Las localidades más importantes de Barrilete Cósmico son: Garlic's Sea y Last Toninas"{
		assert.equals(barrileteCosmico.localidadesMasImportantes(), #{garlicSea, lastToninas})
	}
	
	test "Aplicar un descuento de 25% a Last Toninas, su precio es de $2625" {
		lastToninas.aplicarDescuento(25)
		assert.equals(2625, lastToninas.precio())
	}
	
	test "Aplicar un descuento de 25% a Last Toninas, tiene el certificado de descuento en su equipaje imprescindible" {
		lastToninas.aplicarDescuento(25)
		assert.that(lastToninas.equipajeImprescindible().contains("Certificado de descuento"))
	}
	
	test "Aplicar un descuento del 15% a todos los destinos de Barrilete Cósmico, 
			Garlic´s sea: $2125
			Silver's Sea: $1147.5
			Last Toninas: $2975
			Good Airs: $1275
			Todos deben poseer el certificado de descuento."
		{
			barrileteCosmico.aplicarDescuento(15)
			assert.equals(2125, garlicSea.precio())
			assert.equals(1147.5, silverSea.precio())
			assert.equals(2975, lastToninas.precio())
			assert.equals(1275, goodAirs.precio())
			assert.that(barrileteCosmico.todasLasLocalidadesPoseenCertificadoDeDescuento())
		}
	
	test "Silver's Sea no es un destino peligroso" {
		assert.notThat(silverSea.esPeligrosa())
	}
	
	test "Last Toninas es el único destino peligroso" {
		assert.equals(#{lastToninas}, barrileteCosmico.localidadesPeligrosas())
	}
	
	test "Barrilete cósmico es una empresa extrema" {
		assert.that(barrileteCosmico.esEmpresaExtrema())
	}
	
	test "Carta de destinos de Barrilete Cosmico"{
		assert.equals(
			#{"Last Toninas", "Garlic's Sea", "Good Airs", "Silver's Sea"}, 
			barrileteCosmico.cartaDeLocalidades()
		)
	}
	
	test "Los kilometros de PHari son 415" {
		//Estos viajes no pueden ser armados por barrilete cósmico porque el medio de transporte es al azar y en este test no se contempla el tema saldo.
		var viajeASilverSea = new Viaje(localidadInicial = pHari.localidadDeOrigen(), localidadFinal = silverSea, medioDeTransporte = cumbanchaVolante)
		var viajeAGoodAirs    = new Viaje(localidadInicial = lastToninas, localidadFinal = goodAirs, medioDeTransporte = cumbanchaVolante)
		pHari.viajarA(viajeASilverSea)
		pHari.viajarA(viajeAGoodAirs)
		assert.equals(415, pHari.obtenerKM())
	}
	
	test "PHari vuela desde Last Toninas a Last Toninas y tira error" {
		assert.throwsExceptionLike(
			new VuelosUsuarioException(message = "Se encuentra en la misma localidad a la que quiere viajar"), 
			{ 
				var viajeALastToninas  = new Viaje(localidadInicial = pHari.localidadDeOrigen(), localidadFinal = lastToninas, medioDeTransporte = cumbanchaVolante)
				pHari.viajarA(viajeALastToninas)
			}
		)
	}
	
	test "PHari vuela a Silver's Sea" {
		var viaje = barrileteCosmico.armarUnViaje(pHari, silverSea);
		pHari.viajarA(viaje)
		assert.that(pHari.realizoViajeA(silverSea))
	}
	
	test "PHari vuela a Silver's Sea y se le descuenta dinero"{
		//Este viaje no puede ser armado por barrilete cósmico porque el medio de transporte es al azar y en este test no se contempla el tema saldo.
		var viaje = new Viaje(localidadInicial = pHari.localidadDeOrigen(), localidadFinal = silverSea, medioDeTransporte = cumbanchaVolante)
		
		pHari.viajarA(viaje)
		assert.equals(49994900, pHari.saldo())
	}
	
	test "PHari intenta volar a Garlic´s Sea, pero no le alcanza el dinero" {
		assert.throwsExceptionLike(
			new VuelosUsuarioException(message = "No se cuenta con saldo suficiente para realizar el viaje"), 
			{ 
				var unTransporteMuyCaro = new Avion(turbinas = [turbinaUltraPotente, turbinaUltraPotente, turbinaUltraPotente, turbinaUltraPotente, turbinaUltraPotente], minutosKm = 1)
				var viajeAGarlicSea  = new Viaje(localidadInicial = pHari.localidadDeOrigen(), localidadFinal = garlicSea, medioDeTransporte = unTransporteMuyCaro)
				pHari.viajarA(viajeAGarlicSea)
			}
		)
	}
	
	// TP 2
	
	// Medios de transporte
	
	test "La cumbancha volante tarda 17 minutos entre Nueva York y el Congo Belga (10,260.80 km a una velocidad promedio de 36211,76km/h, lo que hace un km en 0,0017 minutos)" {
		assert.equals(0.0017, cumbanchaVolante.minutosKm())
	}
	
	test "El costo por kilometro de la cumbancha volante con una turbina de impulso 40 y otro de 10 es de $50" {
		assert.equals(50, cumbanchaVolante.costoKm())
	}
	
	test "El 'Chichanic' tiene una probabilidad de chocar de chocar de 100%, por ende su costo por km es de $100000" {
		var chichanic = new Barco(probabilidadChoque = 100, minutosKm = 2)
		assert.equals(100000, chichanic.costoKm())
	}
	
	// Localidades
	
	test "La distancia entre Good Airs y Silver's Sea es de 415 y viceversa" {
		assert.equals(415, goodAirs.distanciaA(silverSea))
		assert.equals(415, silverSea.distanciaA(goodAirs))
	}
	
	test "La distancia entre Last Toninas y Garlic's Sea es de 25 y viceversa" {
		assert.equals(25, lastToninas.distanciaA(garlicSea))
		assert.equals(25, garlicSea.distanciaA(lastToninas))
	}
	
	test "La distancia entre Last Toninas y Last Toninas es 0" {
		assert.equals(0, lastToninas.distanciaA(lastToninas))
	}
	
	// Viajes
	
	test "El costo entre Good Airs y Silver's Sea en la cumbancha volante es de $22100" {
		assert.equals(22100 ,goodAirsASilverSea.precioViaje())
	}
	test "El costo entre Last Toninas y Garlic's Sea en el 114 es de $127500" {
		assert.equals(127500 ,lastToninasAGarlicSea.precioViaje())	
	}
	
	//Usuarios
	
	test "PHari sigue al ElDiegote" {
		pHari.seguirA(elDiegote)
		assert.that(pHari.estaSiguiendoA(elDiegote))
	}
	
	test "elDiegote no sigue a nadie" {
		assert.that(elDiegote.estaSiguiendoA(pHari).negate())
	}
	
	test "elDiegote viaja a Good Airs, cuando ya esta ahi, por lo tanto no gasta nada" {
		var viaje = barrileteCosmico.armarUnViaje(elDiegote, goodAirs);
		pHari.viajarA(viaje)
		assert.equals(3000000 ,elDiegote.saldo())
	}
	
	test "elDiegote viaja a Good Airs, cuando ya esta ahi, por lo tanto no se registra como que viajo a dicha localidad" {
		var viaje = barrileteCosmico.armarUnViaje(elDiegote, goodAirs);
		pHari.viajarA(viaje)
		assert.that(elDiegote.realizoViajeA(goodAirs).negate())
	}
	
	
	//Barrilete cósmico
	
	test "Barrilete cósmico le arma un viaje a Pablo Hari a Silver´s Sea"{
		var viaje = barrileteCosmico.armarUnViaje(pHari, silverSea)
		assert.equals(viaje.localidadInicial(), pHari.localidadDeOrigen())
		assert.equals(viaje.localidadFinal(), silverSea)
	}
	
	test "Barrillete cósmico le arma un viaje a Pablo Hari a Good Airs y su nueva localidad de origen es Good Airs"{
		var viajeAGoodAirs = barrileteCosmico.armarUnViaje(pHari, goodAirs)
		pHari.viajarA(viajeAGoodAirs)
		assert.equals(pHari.localidadDeOrigen(), goodAirs)
	}
	
	

}
